server.port=8385

server.tomcat.remoteip.protocol-header=x-forwarded-proto
server.tomcat.remoteip.remote-ip-header=x-forwarded-for

di.saml.pages.success=/mailbox/INBOX
di.saml.pages.nonsecured=/,/manage/**,/error,/webjars/**,/css/**,/js/**,/img/**,/favicon.ico,/api/**,/landing/form
di.saml.pages.csrfBypass=/api/**,/manage/**,/landing/form
spring.main.lazy-initialization=true

spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=150MB

medcom-mailbox.log-delete-after=13M
medcom-mailbox.log-delete-task-cron=0 0 10 * * *
medcom-mailbox.update-inbox-task-cron=0 */5 * * * *

spring.jpa.open-in-view=true

management.endpoints.web.base-path=/manage


# minimum pool size of 0 ensures we do not keep unneeded open connection at the cost of having to create
# new connections when needed (with a bit of overhead after an idle period)
spring.datasource.hikari.minimum-idle=0
# maximum pool size is computed as (expected peak at 8:00 to 9:00)
# - 10.000 users logging in during one hour gives 10.000 API calls
# - each interaction takes 5 SQL queries to complete (guess) - which results in 50.000 SQL queries during that hour
# - 50.000 / 3.600 = 14 SQL queries per second
# - average SQL lookup takes 100ms (guess), resulting in 1.4 seconds with 1 connection, or 1.4 required connections to support requests
# - expect a 2x peak inside peak hour (spikes during peak), resulting in 3 required connections
# - we need 1 reserved connection for scheduled tasks, resulting in 4 required connections
# - we have 2 instances running, so half of that rounded up gives us max connections per instance of 2 - we round up to 6 to add some buffer
spring.datasource.hikari.maximum-pool-size=6
# expire after 2 minutes when idle, so the pool shutdown fast
spring.datasource.hikari.idle-timeout=120000
# expire after 20 minutes when in use, so we don't have long-living connections in the pool (might be killed by network infrastructure)
spring.datasource.hikari.max-lifetime=1200000
# throws warnings after 6 minutes if the connection has not been returned to the pool
spring.datasource.hikari.leak-detection-threshold=360000

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

server.servlet.session.cookie.same-site=None

spring.flyway.validateOnMigrate=true
spring.flyway.table=schema_version
spring.flyway.locations=classpath:db/migration
